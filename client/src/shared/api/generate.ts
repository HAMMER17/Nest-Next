/**
 * Generated by orval v6.21.0 üç∫
 * Do not edit manually.
 * Blog List
 * OpenAPI spec version: 1.0.0
 */
import { createInstance } from "./instance";
import type { BodyType } from "./instance";
export type BlockListControllerGetListParams = {
  q?: string;
};

export type AddBlockDtoType =
  (typeof AddBlockDtoType)[keyof typeof AddBlockDtoType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddBlockDtoType = {
  Website: "Website",
  Keyword: "Keyword",
} as const;

export interface AddBlockDto {
  data: string;
  type: AddBlockDtoType;
}

export type BlockItemDtoType =
  (typeof BlockItemDtoType)[keyof typeof BlockItemDtoType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BlockItemDtoType = {
  Website: "Website",
  Keyword: "Keyword",
} as const;

export interface BlockItemDto {
  blockListId: number;
  createdAt: string;
  data: string;
  id: number;
  type: BlockItemDtoType;
}

export interface BlockListDto {
  id: number;
  items: BlockItemDto[];
  ownerId: number;
}

export interface AccountPacth {
  isBlock?: boolean;
}

export interface AccountDto {
  id: number;
  isBlock: boolean;
  ownerId: number;
}

export interface GetSessionDto {
  email: string;
  exp: number;
  iat: number;
  id: number;
}

export interface SignInDto {
  email: string;
  password: string;
}

export interface SignUpDto {
  email: string;
  password: string;
}

export interface HelloWorldDto {
  message: string;
}

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const appControllerGetHello = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<HelloWorldDto>({ url: `/`, method: "GET" }, options);
};

export const authControllerSignUp = (
  signUpDto: BodyType<SignUpDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/sign-up`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signUpDto,
    },
    options,
  );
};

export const authControllerSignIn = (
  signInDto: BodyType<SignInDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/sign-in`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signInDto,
    },
    options,
  );
};

export const authControllerSignOut = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/auth/sign-out`, method: "POST" },
    options,
  );
};

export const authControllerGetSession = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetSessionDto>(
    { url: `/auth/session`, method: "GET" },
    options,
  );
};

export const accountControllerGetAccount = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<AccountDto>(
    { url: `/account`, method: "GET" },
    options,
  );
};

export const accountControllerPacthAccount = (
  accountPacth: BodyType<AccountPacth>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<AccountDto>(
    {
      url: `/account`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: accountPacth,
    },
    options,
  );
};

export const blockListControllerGetList = (
  params?: BlockListControllerGetListParams,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<BlockListDto>(
    { url: `/block-list`, method: "GET", params },
    options,
  );
};

export const blockListControllerAddBlock = (
  addBlockDto: BodyType<AddBlockDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<BlockItemDto>(
    {
      url: `/block-list/item`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: addBlockDto,
    },
    options,
  );
};

export const blockListControllerRemoteBlock = (
  id: number,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<BlockItemDto>(
    { url: `/block-list/item/${id}`, method: "DELETE" },
    options,
  );
};

export type AppControllerGetHelloResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHello>>
>;
export type AuthControllerSignUpResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignUp>>
>;
export type AuthControllerSignInResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignIn>>
>;
export type AuthControllerSignOutResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignOut>>
>;
export type AuthControllerGetSessionResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetSession>>
>;
export type AccountControllerGetAccountResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerGetAccount>>
>;
export type AccountControllerPacthAccountResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerPacthAccount>>
>;
export type BlockListControllerGetListResult = NonNullable<
  Awaited<ReturnType<typeof blockListControllerGetList>>
>;
export type BlockListControllerAddBlockResult = NonNullable<
  Awaited<ReturnType<typeof blockListControllerAddBlock>>
>;
export type BlockListControllerRemoteBlockResult = NonNullable<
  Awaited<ReturnType<typeof blockListControllerRemoteBlock>>
>;
